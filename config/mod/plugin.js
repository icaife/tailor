/**
 * @description plugins for webpack config
 * @author Leon.Cai
 */

"use strict";

const
    Webpack = require("webpack"),
    Path = require("path"),
    HtmlWebpackPlugin = require("html-webpack-plugin"),
    StringReplaceWebpackPlugin = require("string-replace-webpack-plugin"),
    HtmlWebpackReplaceUrlPlugin = require("html-webpack-replaceurl-plugin"),
    CleanWebpackPlguin = require("clean-webpack-plugin"),
    ManifestPlugin = require("webpack-manifest-plugin"),
    UglifyJsPlugin = Webpack.optimize.UglifyJsPlugin,
    ModuleConcatenationPlugin = Webpack.optimize.ModuleConcatenationPlugin,
    ExtractTextPlugin = require("extract-text-webpack-plugin"),
    StyleExtHtmlWebpackPlugin = require("style-ext-html-webpack-plugin"),
    CommonsChunkPlugin = Webpack.optimize.CommonsChunkPlugin,
    // BrowserSyncPlugin = require("browser-sync-webpack-plugin"),
    CopyWebpackPlugin = require("copy-webpack-plugin");

/**
 * html webpack replace plugin
 * @param {Object} options
 */
var HtmlWebpackPluginReplace = function(options) {
    this.options = Object.assign({
        replace: function(html) {
            return html;
        }
    }, options);
};

/**
 * apply function from compiler
 * @see https://webpack.github.io/docs/how-to-write-a-plugin.html
 * @see http://webpack.github.io/docs/plugins.html
 * @see http://www.alloyteam.com/2016/01/webpack-loader-1/
 * @param  {[type]} compiler [description]
 * @return {[type]}          [description]
 */
HtmlWebpackPluginReplace.prototype.apply = function(compiler) {
    let that = this,
        opts = that.options,
        config = opts.config;

    compiler.plugin("compilation", function(compilation) {
        compilation.plugin("html-webpack-plugin-before-html-processing", (htmlPluginData, callback) => {
            that.replace(compilation, htmlPluginData, callback);
        });
    });

    //compilation.module-asset
    // compiler.plugin("emit", function(compilation, callback) {
    //     compilation.chunks.forEach(function(chunk) {
    //         // Explore each module within the chunk (built inputs):
    //         chunk.modules.forEach(function(module) {
    //             // Explore each source file path that was included into the module:
    //             module.fileDependencies.forEach(function(filepath) {
    //                 // we've learned a lot about the source structure now...
    //                 // console.log(filepath);
    //             });
    //         });

    //         // Explore each asset filename generated by the chunk:
    //         chunk.files && chunk.files.forEach(function(filename) {
    //             // Get the asset source for each file generated by the chunk:
    //             var source = compilation.assets[filename].source();
    //         });
    //     });

    //     compilation.mainTemplate.plugin("startup", function(source, module, hash) {
    //         console.log(source);
    //     });
    //     callback();
    // });

    // compiler.plugin("make", function(compilation, callback) {
    //     compilation.plugin("normal-module-loader", function(loaderContext, module) {
    //         let issuer = module.issuer;

    //         if (issuer) {
    //             let code = module.issuer._source._value,
    //                 modName = issuer.context.replace(Path.join(config.basic.root, config.basic.src), "").replace(/[\\\/]/g, "/");

    //             // module.issuer._source._value = code.replace(/(require\.ensure\([\s\S]+,[\s\S]+)\)/img, `$1,"${modName}/_parts")`);
    //             // console.log(module.issuer._source._value);
    //         }
    //     });
    //     callback();
    // });
};

/**
 * replace function
 * @param  {Compilation}   compilation    [description]
 * @param  {Object}   htmlPluginData [description]
 * @param  {Function} callback       [description]
 * @return {Void}                  [description]
 */
HtmlWebpackPluginReplace.prototype.replace = function(compilation, htmlPluginData, callback) {
    let html = htmlPluginData.html,
        outputName = htmlPluginData.outputName,
        assets = htmlPluginData.assets,
        chunks = Object.keys(assets.chunks || {}),
        js = assets.js || [],
        css = assets.css || [],
        options = this.options;

    htmlPluginData.html = options.replace(html, {
        chunks: chunks,
        js: js,
        css: css,
        htmlPluginData: htmlPluginData
    });

    callback(null, htmlPluginData);
};ã€€

//TODO
function addJs(js) {
    let items = [];

    js.forEach((item) => {
        item = item.replace(/\\/g, "/");
        items.push(`<script src="${item}" type="text/javascript" defer="true"></script>`);
    });

    return `\n@prepend("scripts-head")\n${items.join("\n")}\n@endprepend\n`;
}

function addCss(css) {
    let items = [];

    css.forEach((item) => {
        item = item.replace(/\\/g, "/");
        items.push(`<link href="${item}" rel="stylesheet">`);
    });

    return `\n@prepend("styles-head")\n${items.join("\n")}\n@endprepend\n`;
}

module.exports = (config) => {
    let plugin = [],
        entry = config.entry,
        basic = config.basic,
        htmlConfig = basic.html,
        htmlExt = htmlConfig.ext;

    Object.keys(entry).forEach((page) => {
        let item = entry[page],
            obj = Path.parse(page),
            fileName = `${page}.${htmlExt[1]}`, //TODO
            opts = {
                filename: `${basic.views}/${fileName}`,
                template: `${fileName}`,
                inject: false
            };

        plugin.push(new HtmlWebpackPlugin(opts));
    });

    plugin.push(
        // new BrowserSyncPlugin({
        //     host: "localhost",
        //     port: 8080,
        //     proxy: "http://duang.tff.com/"
        // }),
        // new Webpack.HotModuleReplacementPlugin(),
        new CleanWebpackPlguin([basic.dest], { //clean dirs
            root: basic.root,
            verbose: !true
        }),
        /**
         * @see https://doc.webpack-china.org/guides/author-libraries/#-library
         * @see https://github.com/webpack/webpack/tree/master/examples/multiple-commons-chunks
         * @see https://github.com/boijs/boi-kernel/blob/ed1c95266cd17853c0e7b02678800000a7cdb052/lib/config/generateConfig/_entry.js
         */
        new CommonsChunkPlugin({
            names: [...Object.keys(entry)],
            // name: "vendor",
            // chunks: [...Object.keys(entry)],
            chunks: [],
            minChunks: 4,
            // minChunks: module => {
            //     let context = module.context;

            //     return /[\\\/]common[\\\/]/.test(context);
            // },
            // children: true,
            filename: `${basic.assets}/[name].common.js`,
        }),
        new ExtractTextPlugin({ //extract css
            filename: `${basic.assets}/[name].css`,
            allChunks: !true
        }),
        /**
         * @see  https://github.com/mishoo/UglifyJS2
         */
        new UglifyJsPlugin({
            drop_debugger: true,
            dead_code: true,
            join_vars: true,
            reduce_vars: true,
            drop_console: true,
            comments: /[^\s\S]/g
        }),
        new ModuleConcatenationPlugin(),
        new HtmlWebpackPluginReplace({ //add js and css to file end
            replace: (html, obj) => {
                //todo
                html = html.replace(/$/, addCss(obj.css) + addJs(obj.js));
                return html;
            },
            config: config
        }),
        new ManifestPlugin({
            fileName: `${basic.assets}/manifest.json`,
            publicPath: `${basic.cdn}`
        }), /*new StyleExtHtmlWebpackPlugin()*/
        new CopyWebpackPlugin([{
            context: Path.join(basic.root, basic.src),
            from: {
                glob: "**/*.{blade.php,html}",
                dot: true
            },
            to: Path.join(basic.root, basic.dest, basic.views)
        }]),
        new Webpack.ProvidePlugin({
            "$": "jquery",
            "jQuery": "jquery",
            "Vue": "vue"
        })
    );

    //todo:
    //  ProvidePlugin
    //  DefinePlugin
    //  EnvironmentPlugin process.env
    //  stats-webpack-plugin
    //  AggressiveMergingPlugin
    //  MinChunkSizePlugin
    //  LimitChunkCountPlugin
    return plugin;
}